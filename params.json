{"google":"","tagline":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"libencoding","body":"## Introduction\r\n\r\nlibencoding aims to provide a generic and extensible encoding conversion library.\r\n\r\n## Motivation and Scope\r\n\r\n## Design Decisions\r\n\r\n## Technical Specifications\r\n\r\n```c++\r\nnamespace encoding \r\n{ \r\n    enum class encoding_errc \r\n    { \r\n        trailing_byte_expected = 1, \r\n        leading_byte_expected, \r\n        partial_conversion, \r\n        ill_formed_code_unit, \r\n        ill_formed_code_point, \r\n        ill_formed_byte_sequence \r\n    }; \r\n\r\n    const std::error_category& encoding_category(); \r\n\r\n    std::error_code make_error_code(encoding_errc e); \r\n    std::error_code make_error_condition(encoding_errc e); \r\n\r\n    struct utf8    { }; \r\n    struct utf16   { }; \r\n    struct utf16le { }; \r\n    struct utf16be { }; \r\n    struct utf32   { }; \r\n    struct utf32le { }; \r\n    struct utf32be { }; \r\n\r\n    std::ostream& operator<<(std::ostream& out, const utf8&);\r\n    std::ostream& operator<<(std::ostream& out, const utf16&);\r\n    std::ostream& operator<<(std::ostream& out, const utf16le&);\r\n    std::ostream& operator<<(std::ostream& out, const utf16be&);\r\n    std::ostream& operator<<(std::ostream& out, const utf32&);\r\n    std::ostream& operator<<(std::ostream& out, const utf32le&);\r\n    std::ostream& operator<<(std::ostream& out, const utf32be&);\r\n\r\n    template<class Encoding> struct max_code_unit_per_code_point; \r\n \r\n    template<> struct max_code_unit_per_code_point<utf8>;\r\n    template<> struct max_code_unit_per_code_point<utf16>;\r\n    template<> struct max_code_unit_per_code_point<utf16le>; \r\n    template<> struct max_code_unit_per_code_point<utf16be>; \r\n    template<> struct max_code_unit_per_code_point<utf32>; \r\n    template<> struct max_code_unit_per_code_point<utf32le>; \r\n    template<> struct max_code_unit_per_code_point<utf32be>; \r\n\r\n    template<\r\n        class FromCharT,\r\n        class FromEncoding,\r\n        class ToCharT,\r\n        class ToEncoding> \r\n    struct converter \r\n    { \r\n        typedef FromCharT    from_char_type; \r\n        typedef FromEncoding from_encoding; \r\n        typedef ToCharT      to_char_type; \r\n        typedef ToEncoding   to_encoding; \r\n\r\n        converter() = default; \r\n        converter(const converter&) = default; \r\n        converter(converter&&) = default; \r\n\r\n        ~converter() = default; \r\n\r\n        converter& operator=(const converter&) = default; \r\n        converter& operator=(converter&&) = default; \r\n\r\n        template<class InputIterator, class OutputIterator> \r\n        void operator()(InputIterator first,\r\n                        InputIterator last,\r\n                        OutputIterator out,\r\n                        std::error_code& e) ;\r\n\r\n        template<class InputIterator, class OutputIterator> \r\n        void operator()(InputIterator first,\r\n                        InputIterator last,\r\n                        OutputIterator out) ;\r\n\r\n        template<std::size_t N, class OutputIterator> \r\n        void operator()(const from_char_type (&str)[N],\r\n                        OutputIterator out,\r\n                        std::error_code& e) ;\r\n\r\n        template<std::size_t N, class OutputIterator> \r\n        void operator()(const from_char_type (&str)[N],\r\n                        OutputIterator out) ;\r\n    }; \r\n\r\n    // UTF-8 \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf8, ToCharT, utf8>; \r\n\r\n    // UTF-16 \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf8, ToCharT, utf16>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf16, ToCharT, utf16>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf16, ToCharT, utf8>; \r\n\r\n    // UTF-16LE \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf8, ToCharT, utf16le>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf16le, ToCharT, utf16le>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf16le, ToCharT, utf8>; \r\n\r\n    // UTF-16BE \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf8, ToCharT, utf16be>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf16be, ToCharT, utf16be>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf16be, ToCharT, utf8>; \r\n\r\n    // UTF-32 \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf8, ToCharT, utf32>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf32, ToCharT, utf32>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf32, ToCharT, utf8>; \r\n\r\n    // UTF-32LE \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf8, ToCharT, utf32le>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf32le, ToCharT, utf32le>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf32le, ToCharT, utf8>; \r\n\r\n    // UTF-32BE \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf8,  ToCharT, utf32be>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf32be, ToCharT, utf32be>; \r\n    template<class FromCharT, class ToCharT>\r\n        struct converter<FromCharT, utf32be, ToCharT, utf8>; \r\n} // namespace encoding \r\n\r\nnamespace std \r\n{ \r\n    template<> \r\n    struct is_error_code_enum<encoding::encoding_errc> : true_type { }; \r\n} // namespace std\r\n```\r\n\r\n## References\r\n\r\nThe Unicode Consortium. The Unicode Standard.\r\n\r\n[http://www.unicode.org/versions/latest/](http://www.unicode.org/versions/latest/)"}